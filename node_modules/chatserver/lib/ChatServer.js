var Util=require('util');
var EventEmitter=require('events').EventEmitter;
var Storage=require('./ChatServerStorage');

exports.createServer=function (options){
	return new ChatServer(options);
};

Util.inherits(ChatServer,EventEmitter);

function ChatServer(options){
	EventEmitter.call(this);
	this.config=options.config;
	this.server={};
}

ChatServer.prototype.init_jsonrpc=function(){
	var self=this;
	if(self.server.jsonrpc)
		return self.server;
	self.server.jsonrpc=require('./servers/jsonrpc').createServer({
		'debug': true,
		'createResponseBuilder': function(storage){
			return new ResponseBuilder(storage);
		},
		'createStorage': function(){
			return Storage.createStorage(self.config.redis);
		}
	});
	self.server.jsonrpc.listen(self.config.listen.jsonrpc.port,self.config.listen.jsonrpc.host);
	return self.server.jsonrpc;
}

function ResponseBuilder(storage) {
	if((!this instanceof ResponseBuilder)) return new ResponseBuilder(storage);
	
	var self=this;
	self.storage=storage;
}
ResponseBuilder.prototype.build=function(request,callback) {
	var self=this;
	request=request || {};
	var action=request.action || {};
	switch(action.command) {
		case 'msg':
			cmdSendMsg.call(self,action.data);
			break;
		case 'subscribe':
			cmdSubscribe.call(self,action.data);
			break;
		case 'setName':
			cmdSetName.call(self,action.data);
			break;
		default:
			cmdEnd.call(self,request);
			break;
	}
	function cmdEnd(request) {
		callback(undefined,request);
	}
	function cmdSendMsg(request) {
		self.storage.sendMsg(request,function(err,request){
			cmdEnd.call(self,request);
		});
	}
	function cmdSubscribe(request) {
		self.storage.subscribe(request,function(err,request){
			cmdEnd.call(self,request);
		});
	}
	function cmdSetName(request) {
		self.storage.setName(request,function(err,request){
			cmdEnd.call(self,request);
		});
	}
}